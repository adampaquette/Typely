//HintName: Typely.Generators.Tests.Typely.Configurations.Id.g.cs
// <auto-generated>This file was generated by Typely.</auto-generated>
using System;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Text.Json.Serialization;
using Typely.Core;
using Typely.Core.Converters;
using Typely.Generators.Tests.Typely.Configurations;

#nullable enable

namespace Typely.Generators.Tests.Typely.Configurations
{
    [TypeConverter(typeof(TypelyTypeConverter<bool, Id>))]
    [JsonConverter(typeof(TypelyJsonConverter<bool, Id>))]
    public partial class Id : ITypelyValue<bool, Id>, IEquatable<Id>, IComparable<Id>, IComparable
    {
        public bool Value { get; private set; }

        public Id() => throw new Exception("Parameterless constructor is not allowed.");

        public Id(bool value)
        {
            TypelyValue.ValidateAndThrow<bool, Id>(value);
            Value = value;
        }

        public static ValidationError? Validate(bool value) => null;

        public static Id From(bool value) => new(value);

        public static bool TryFrom(bool value, [MaybeNullWhen(false)] out Id typelyType, out ValidationError? validationError)
        {
            validationError = Validate(value);
            var isValid = validationError == null;
            typelyType = default;
            if (isValid)
            {
                typelyType.Value = value;
            }
            return isValid;
        }

        public override string ToString() => Value.ToString();

        public static bool operator !=(Id left, Id right) => !(left == right);

        public static bool operator ==(Id left, Id right) => left.Equals(right);

        public override int GetHashCode() => Value.GetHashCode();

        public bool Equals(Id other) => Value.Equals(other.Value);

        public override bool Equals([NotNullWhen(true)] object? obj) => obj is Id && Equals((Id)obj);

        public int CompareTo(Id other) => Value.CompareTo(other.Value);

        public int CompareTo(object? obj) => obj is not Id ? 1 : CompareTo((Id)obj!);

        public static explicit operator bool(Id value) => value.Value;
    }
}