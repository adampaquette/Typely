//HintName: Typely.Generators.Tests.Typely.Configurations.A.Votes.g.cs
// <auto-generated>This file was generated by Typely.</auto-generated>
using System;
using System.Diagnostics.CodeAnalysis;
using System.Text.Json.Serialization;
using Typely.Core;
using Typely.Core.Converters;

#nullable enable

namespace Typely.Generators.Tests.Typely.Configurations.A
{
    [JsonConverter(typeof(TypelyJsonConverter<int, Votes>))]
    public partial struct Votes : ITypelyValue<int, Votes>, IEquatable<Votes>, IComparable<Votes>, IComparable
    {
        public int Value { get; private set; }

        public Votes() => throw new Exception("Parameterless constructor is not allowed.");

        public Votes(int value)
        {
            TypelyValue.ValidateAndThrow<int, Votes>(value);
            Value = value;
        }

        public static ValidationError? Validate(int value) => null;

        public static Votes From(int value) => new(value);

        public static bool TryFrom(int value, [MaybeNullWhen(false)] out Votes typelyType, out ValidationError? validationError)
        {
            validationError = Validate(value);
            var isValid = validationError == null;
            typelyType = default;
            if (isValid)
            {
                typelyType.Value = value;
            }
            return isValid;
        }

        public override string ToString() => Value.ToString();

        public static bool operator !=(Votes left, Votes right) => !(left == right);

        public static bool operator ==(Votes left, Votes right) => left.Equals(right);

        public override int GetHashCode() => Value.GetHashCode();

        public bool Equals(Votes other) => Value.Equals(other.Value);

        public override bool Equals([NotNullWhen(true)] object? obj) => obj is Votes && Equals((Votes)obj);

        public int CompareTo(Votes other) => Value.CompareTo(other.Value);

        public int CompareTo(object? obj) => obj is not Votes ? 1 : CompareTo((Votes)obj!);

        public static explicit operator int(Votes value) => value.Value;
    }
}