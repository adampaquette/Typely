//HintName: Planet.g.cs
// <auto-generated>This file was generated by Typely.</auto-generated>
using Typely.Core;
using Typely.Core.Converters;
using System.Diagnostics.CodeAnalysis;
using System.Text.Json.Serialization;

#nullable enable

namespace Typely.Generators.Tests.Typely.Configurations
{
    [JsonConverter(typeof(TypelyJsonConverter<String, Planet>))]
    public partial struct Planet : ITypelyValue<String, Planet>
    {
        public String Value { get; private set; }

        public Planet() => throw new Exception("Parameterless constructor is not allowed.");

        public Planet(String value)
        {
            TypelyValue.ValidateAndThrow<String, Planet>(value);
            Value = value;
        }

        public static ValidationError? Validate(String value) 
        {
            if (!EqualityComparer<string>.Default.Equals(value, "sun"))
            {
                return ValidationErrorFactory.Create(value, "NotEqual", ErrorMessages.NotEqual, "Planet",
                    new Dictionary<string, object?> 
                    {
                        { "ComparisonValue", "sun" },
                    });
            }

            return null;
        }

        public static Planet From(String value) => new(value);

        public static bool TryFrom(String value, [MaybeNullWhen(false)] out Planet typelyType, out ValidationError? validationError)
        {
            validationError = Validate(value);
            var isValid = validationError == null;
            typelyType = default;
            if (isValid)
            {
                typelyType.Value = value;
            }
            return isValid;
        }
    }
}