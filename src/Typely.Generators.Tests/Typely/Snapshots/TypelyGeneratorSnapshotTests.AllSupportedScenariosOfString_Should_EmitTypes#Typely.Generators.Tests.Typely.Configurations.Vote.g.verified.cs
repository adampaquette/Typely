//HintName: Typely.Generators.Tests.Typely.Configurations.Vote.g.cs
// <auto-generated>This file was generated by Typely.</auto-generated>
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Text.Json.Serialization;
using Typely.Core;
using Typely.Core.Converters;

#nullable enable

namespace Typely.Generators.Tests.Typely.Configurations
{
    [JsonConverter(typeof(TypelyJsonConverter<string, Vote>))]
    public partial struct Vote : ITypelyValue<string, Vote>, IEquatable<Vote>, IComparable<Vote>, IComparable
    {
        public string Value { get; private set; }

        public Vote() => throw new Exception("Parameterless constructor is not allowed.");

        public Vote(string value)
        {
            TypelyValue.ValidateAndThrow<string, Vote>(value);
            Value = value;
        }

        public static ValidationError? Validate(string value)
        {
            if (value == null) throw new ArgumentNullException(nameof(Vote));

            if (string.IsNullOrWhiteSpace(value))
            {
                return ValidationErrorFactory.Create(value, "NotEmpty", ErrorMessages.NotEmpty, "Votes");
            }

            if (value.Equals("abc"))
            {
                return ValidationErrorFactory.Create(value, "NotEqual", ErrorMessages.NotEqual, "Votes",
                    new Dictionary<string, object?>
                    {
                        { "ComparisonValue", "abc" },
                    });
            }

            return null;
        }

        public static Vote From(string value) => new(value);

        public static bool TryFrom(string value, [MaybeNullWhen(false)] out Vote typelyType, out ValidationError? validationError)
        {
            validationError = Validate(value);
            var isValid = validationError == null;
            typelyType = default;
            if (isValid)
            {
                typelyType.Value = value;
            }
            return isValid;
        }

        public override string ToString() => Value.ToString();

        public static bool operator !=(Vote left, Vote right) => !(left == right);

        public static bool operator ==(Vote left, Vote right) => left.Equals(right);

        public override int GetHashCode() => Value.GetHashCode();

        public bool Equals(Vote other) => Value.Equals(other.Value);

        public override bool Equals([NotNullWhen(true)] object? obj) => obj is Vote && Equals((Vote)obj);

        public int CompareTo(Vote other) => Value.CompareTo(other.Value);

        public int CompareTo(object? obj) => obj is not Vote ? 1 : CompareTo((Vote)obj!);

        public static explicit operator string(Vote value) => value.Value;
    }
}